name: CI Build

on:
  push:
    branches:
      - main

env:
  RG_NAME: 'twt-website'
  LOCATION: 'eastus'
  WEBAPP_NAME: 'twt-web-deploy'

jobs:

  buildImage:
    name: Build and Push Docker Image
    runs-on: self-hosted

    steps:

    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    # authenticate into Azure Container Registry
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Build and push container image
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.CONTAINER_REGISTRY }}/tailwindtraders-ado40:${{ github.sha }}
        context: ./TailwindTraders.Website/Source/Tailwind.Traders.Web/

  deployToUAT:
    runs-on: self-hosted
    needs: buildImage
    environment:
      name: User Acceptance Testing
      url: 'https://${{ env.WEBAPP_NAME }}-uat.azurewebsites.net'
    steps:
      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy website to Azure
      - name: "Deploy Website"
        run: |
          if [az webapp show --resource-group ${{ env.RG_NAME }} --name ${{ env.WEBAPP_NAME }} ]; then
            productionImage=$(az webapp show --resource-group ${{ env.RG_NAME }} --name ${{ env.WEBAPP_NAME }} --query 'siteConfig.linuxFxVersion' -o tsv)
          else
            productionImage='DOCKER|${{ secrets.CONTAINER_REGISTRY }}/tailwindtraders-ado40:${{ github.sha }}'
          fi

          az deployment sub create --name ${{ env.RG_NAME }} \
          --location ${{ env.LOCATION }} \
          --template-file ./main.bicep \
          --parameters location=${{ env.LOCATION }} \
          --parameters rgName=${{ env.RG_NAME }} \
          --parameters webAppName=${{ env.WEBAPP_NAME }}-uat \
          --parameters dockerRegistryHost=${{ secrets.CONTAINER_REGISTRY }} \
          --parameters dockerRegistryServerUsername=${{ secrets.REGISTRY_USERNAME }} \
          --parameters dockerRegistryServerPassword=${{ secrets.REGISTRY_PASSWORD }} \
          --parameters dockerImage=$productionImage \
          --parameters stagingDockerImage='DOCKER|${{ secrets.CONTAINER_REGISTRY }}/tailwindtraders-ado40:${{ github.sha }}'
        working-directory: ./TailwindTraders.Website/Deploy

      - name: Swap slots
        run: |
          az webapp deployment slot swap  -g '${{ env.RG_NAME }}' -n '${{ env.WEBAPP_NAME }}-uat' --slot staging --target-slot production

      - name: Azure Logout
        run: |
          az logout
          az cache purge
          az account clear

  deployToProductionStaging:
    runs-on: self-hosted
    needs: deployToUAT
    environment:
      name: Production Staging
      url: 'https://${{ env.WEBAPP_NAME }}-staging.azurewebsites.net'
    steps:
      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy website to Azure
      - name: "Deploy Website"
        run: |
          if [az webapp show --resource-group ${{ env.RG_NAME }} --name ${{ env.WEBAPP_NAME }} ]; then
            productionImage=$(az webapp show --resource-group ${{ env.RG_NAME }} --name ${{ env.WEBAPP_NAME }} --query 'siteConfig.linuxFxVersion' -o tsv)
          else
            productionImage='DOCKER|${{ secrets.CONTAINER_REGISTRY }}/tailwindtraders-ado40:${{ github.sha }}'
          fi
          
          az deployment sub create --name ${{ env.RG_NAME }} \
          --location ${{ env.LOCATION }} \
          --template-file ./main.bicep \
          --parameters location=${{ env.LOCATION }} \
          --parameters rgName=${{ env.RG_NAME }} \
          --parameters webAppName=${{ env.WEBAPP_NAME }} \
          --parameters dockerRegistryHost=${{ secrets.CONTAINER_REGISTRY }} \
          --parameters dockerRegistryServerUsername=${{ secrets.REGISTRY_USERNAME }} \
          --parameters dockerRegistryServerPassword=${{ secrets.REGISTRY_PASSWORD }} \
          --parameters dockerImage=$productionImage \
          --parameters stagingDockerImage='DOCKER|${{ secrets.CONTAINER_REGISTRY }}/tailwindtraders-ado40:${{ github.sha }}'
        working-directory: ./TailwindTraders.Website/Deploy

      - name: Azure Logout
        run: |
          az logout
          az cache purge
          az account clear

  deployToProduction:
    runs-on: self-hosted
    needs: deployToProductionStaging
    environment:
      name: Production
      url: 'https://${{ env.WEBAPP_NAME }}.azurewebsites.net'
    steps:
      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Swap slots
        run: |
          az webapp deployment slot swap  -g ${{ env.RG_NAME }} -n ${{ env.WEBAPP_NAME }} --slot staging --target-slot production

      - name: Azure Logout
        run: |
          az logout
          az cache purge
          az account clear
